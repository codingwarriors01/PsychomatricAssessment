import React from 'react';
import 'bootstrap'
import DOMPurify from 'dompurify';


   

    const rawHTML = `
    import java.io.IOException;<br/>
    import java.util.Collection;<br/>
    import java.util.Properties;<br/>
    import java.util.Scanner;<br/>
    import java.io.File;<br/>
    import com.toshiba.mwcloud.gs.Collection;<br/>
    import com.toshiba.mwcloud.gs.GSException;<br/>
    import com.toshiba.mwcloud.gs.GridStore;<br/>
    import com.toshiba.mwcloud.gs.GridStoreFactory;<br/>
    import com.toshiba.mwcloud.gs.Query;<br/>
    import com.toshiba.mwcloud.gs.RowKey;<br/>
    import com.toshiba.mwcloud.gs.RowSet;<br/>

    #We want to move the data from the CSV file into a GridDB container. First, let’s create the container schema as a static class:<br/>
    public static class Customers{<br/>
        <br/>
        @RowKey int customer;   <br/>
        int age;<br/>
        Double income;<br/>
        String purchased_product;<br/>
       }<br/>
        #Let’s establish a connection to GridDB. We will create a Properties instance using the specifics of our GridDB installation. Use the following code:<br/>
        Properties props = new Properties();
        props.setProperty("notificationAddress", "239.0.0.1");
        props.setProperty("notificationPort", "31999");
        props.setProperty("clusterName", "defaultCluster");
        props.setProperty("user", "admin");
        props.setProperty("password", "admin");
        GridStore store = GridStoreFactory.getInstance().getGridStore(props); <br/><br/>
        #Let us select theCustomers container since we will be using it:<br/>
        Collection<String, Customers> coll = store.putCollection("col01", Customers.class);<br/><br/>
        
        #We can use the following java code to read data from the customers.csv file and store it into GridDB:<br/>
        File file1 = new File("customers.csv");<br/>
                Scanner sc = new Scanner(file1);<br/>
                String data = sc.next();<br/>
 
                while (sc.hasNext()){<br/>
                        String scData = sc.next();<br/>
                        String dataList[] = scData.split(",");<br/>
                        String customer = dataList[0];<br/>
                        String age = dataList[1];<br/>
                        String income = dataList[2];<br/>
                        String purchased_product = dataList[3];<br/>
                        
                        
                        Customers customers = new Customers();<br/>
    
                        customers.customer = Integer.parseInt(customer);<br/><br/>
                        customers.age = Integer.parseInt(age);<br/>
                        customers.income = Double.parseDouble(income);<br/>
                        customers.purchased_product = purchased_product;<br/>
                        coll.append(customers);<br/>
                 }<br/>
        #Retrieve the Data from GridDB
        Query<customers> query = coll.query("select *");<br/>
                RowSet</customers><customers> rs = query.fetch(false);<br/>
            RowSet res = query.fetch();</customers>  <br/>
        
        #Build the Classifier<br/>
        import java.io.IOException;<br/>
        import java.util.Enumeration;<br/>
        import java.text.DecimalFormat;<br/>

        import weka.classifiers.Classifier;<br/>
        import weka.core.Instances;<br/>
        import weka.classifiers.lazy.IBk;<br/>
        import weka.classifiers.Evaluation;<Br/>
        import weka.core.Instance;<br/>
        import weka.core.converters.ArffLoader;<br/>
        <br/>
        res.setClassIndex(res.numAttributes() - 1);<br/>
        Classifier cls = new IBk(1);        <br/>
        cls.buildClassifier(res);<br/>
    
        System.out.println(cls);<br/>
       
        Evaluation evaluation = new Evaluation(res);<br/>
        evaluation.evaluateModel(cls, res);<br/>
        
        System.out.println(evaluation.toSummaryString());<br/>
        System.out.println(evaluation.toClassDetailsString());<br/>
        System.out.println(evaluation.toMatrixString());<br/>

        /*Compile and Run the Code <br/>
        First, login as the gsadm user. Move your .java file to the bin folder of your GridDB located in the following path:<br/>
        /griddb_4.6.0-1_amd64/usr/griddb-4.6.0/bin<br/>
        Next, run the following command on your Linux terminal to set the path for the gridstore.jar file:*\<br/><br/>

        export CLASSPATH=$CLASSPATH:/home/osboxes/Downloads/griddb_4.6.0-1_amd64/usr/griddb-4.6.0/bin/gridstore.jar<br/>
        javac KNNeighbor.java   # run the following command to compile your .java file <br/> 
        java KNNeighbor #Run the .class file that is generated by running the following command: <br/>

        #Output:- <br/>
        The KNN model will return 1 nearest neighbor for the customer.<br/>
        
                 
         
    `
    function KNNJAVAEgProgram(){
        return(
      <div>
          
        { <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(rawHTML) }} /> }
      </div>
      )
    }
    export default KNNJAVAEgProgram;
  



    
    

